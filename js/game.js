// Generated by CoffeeScript 1.6.3
(function() {
  var OverworldControls,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  OverworldControls = (function() {
    var MenuHandler, MovementHandler;

    MenuHandler = (function(_super) {
      __extends(MenuHandler, _super);

      MenuHandler.minHold = 100;

      MenuHandler.openMenu = 16;

      MenuHandler.openInventory = 69;

      MenuHandler.openRoster = 81;

      function MenuHandler(syndicator, owc) {
        MenuHandler.__super__.constructor.call(this, syndicator);
        this.overworldInterface = owc;
      }

      MenuHandler.prototype.shouldHandleSignal = function(code, duration) {
        if (duration >= this.constructor.minHold) {
          return code === this.constructor.openMenu;
        } else {
          return false;
        }
      };

      MenuHandler.prototype.handleSignalOff = function(signal) {
        if (signal === this.constructor.openMenu) {
          return this.overworldInterface.openMenu();
        }
      };

      return MenuHandler;

    })(InputEventDelegater);

    MovementHandler = (function(_super) {
      __extends(MovementHandler, _super);

      MovementHandler.moveCodes = {
        65: "left",
        87: "up",
        83: "down",
        68: "right"
      };

      MovementHandler.holdRunning = 32;

      MovementHandler.minHold = 30;

      MovementHandler.currentDirection = null;

      MovementHandler.running = false;

      function MovementHandler(syndicator, owc) {
        this.endMovement = __bind(this.endMovement, this);
        this.changeMovement = __bind(this.changeMovement, this);
        this.startMovement = __bind(this.startMovement, this);
        this.handleSignalOff = __bind(this.handleSignalOff, this);
        this.handleSignalOn = __bind(this.handleSignalOn, this);
        this.shouldHandleSignal = __bind(this.shouldHandleSignal, this);
        MovementHandler.__super__.constructor.call(this, syndicator);
        this.overworldInterface = owc;
      }

      MovementHandler.prototype.shouldHandleSignal = function(code, duration) {
        return code in this.constructor.moveCodes || code === this.constructor.holdRunning;
      };

      MovementHandler.prototype.handleSignalOn = function(signal) {
        var direction;
        if (signal in this.constructor.moveCodes) {
          direction = this.constructor.moveCodes[signal];
          if (this.currentDirection === null) {
            return this.startMovement(this.constructor.moveCodes[signal]);
          } else if (this.currentDirection !== direction) {
            return this.changeMovement(this.constructor.moveCodes[signal]);
          }
        } else if (signal === this.constructor.holdRunning && !this.running) {
          console.log("Now running");
          return this.running = true;
        }
      };

      MovementHandler.prototype.handleSignalOff = function(signal) {
        if (signal in this.constructor.moveCodes) {
          if (this.constructor.moveCodes[signal] === this.currentDirection) {
            this.currentDirection = null;
            return this.endMovement();
          }
        } else if (signal === this.constructor.holdRunning && this.running) {
          console.log("No longer running.");
          return this.running = false;
        }
      };

      MovementHandler.prototype.startMovement = function(direction) {
        return console.log("Moving:", this.currentDirection = direction);
      };

      MovementHandler.prototype.changeMovement = function(direction) {
        return console.log("New Direction:", this.currentDirection = direction);
      };

      MovementHandler.prototype.endMovement = function() {
        return console.log("Done moving.");
      };

      return MovementHandler;

    })(InputEventDelegater);

    function OverworldControls(player, gameInterface) {
      this.player = player;
      this.gameInterface = gameInterface;
      this.openMenu = __bind(this.openMenu, this);
      this.disable = __bind(this.disable, this);
      this.enable = __bind(this.enable, this);
      this.syndicator = new Syndicator();
      this.keyboard = new Keyboard(this.syndicator);
      this.menuHandler = new MenuHandler(this.syndicator, this);
      this.movementHandler = new MovementHandler(this.syndicator, this);
    }

    OverworldControls.prototype.enable = function() {
      this.menuHandler.enable();
      return this.movementHandler.enable();
    };

    OverworldControls.prototype.disable = function() {
      this.menuHandler.disable();
      return this.movementHandler.disable();
    };

    OverworldControls.prototype.openMenu = function() {
      return this.gameInterface.gameMode("saving");
    };

    return OverworldControls;

  }).call(this);

  this.GamePlay = (function() {
    GamePlay.prototype.running = false;

    GamePlay.prototype.handle = null;

    function GamePlay(canvas, _interface) {
      this.canvas = canvas;
      this["interface"] = _interface;
      this.requestFrame = __bind(this.requestFrame, this);
      this.pause = __bind(this.pause, this);
      this.getTileSlice = __bind(this.getTileSlice, this);
      this.frame = __bind(this.frame, this);
      this.play = __bind(this.play, this);
      this.getSave = __bind(this.getSave, this);
      this.overworldResponse = new OverworldControls(null, this["interface"]);
    }

    GamePlay.prototype.getSave = function(cb) {
      return cb(this["interface"].currentSave());
    };

    GamePlay.prototype.loadedMap = null;

    GamePlay.prototype.tileset = null;

    GamePlay.prototype.play = function() {
      var _this = this;
      if (this.loadedMap === null) {
        this["interface"].loadMap(1, function(map, tileset) {
          _this.loadedMap = map;
          _this.tileset = tileset;
          _this.running = true;
          return _this.requestFrame(_this.frame);
        });
      } else {
        this.running = true;
        this.requestFrame(this.frame);
      }
      return this.overworldResponse.enable();
    };

    GamePlay.prototype.frame = function() {
      var blitX, blitY, boundsH, boundsW, context, frame, height, layer, mapx, mapy, tile, tileHeight, tileWidth, tilex, tiley, width, xpos, ypos, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _results;
      _ref = [32, 32], width = _ref[0], height = _ref[1];
      _ref1 = [this.canvas.width - width, this.canvas.height - height], boundsW = _ref1[0], boundsH = _ref1[1];
      _ref2 = [Number.random(boundsW), Number.random(boundsH)], xpos = _ref2[0], ypos = _ref2[1];
      context = this.canvas.getContext("2d");
      context.clearRect(0, 0, this.canvas.width, this.canvas.height);
      frame = 0;
      _ref3 = this.loadedMap.layers;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        layer = _ref3[_i];
        _ref4 = [0, 0], mapx = _ref4[0], mapy = _ref4[1];
        _results.push((function() {
          var _j, _len1, _ref5, _ref6, _results1;
          _results1 = [];
          for (_j = 0, _len1 = layer.length; _j < _len1; _j++) {
            tile = layer[_j];
            if (tile >= 0) {
              _ref5 = this.getTileSlice(tile, frame), tilex = _ref5[0], tiley = _ref5[1], tileWidth = _ref5[2], tileHeight = _ref5[3];
              _ref6 = [mapx * tileWidth, mapy * tileHeight], blitX = _ref6[0], blitY = _ref6[1];
              context.drawImage(this.tileset, tilex, tiley, tileWidth, tileHeight, blitX, blitY, tileWidth, tileHeight);
            }
            if (++mapx >= this.loadedMap.width) {
              mapy += 1;
              _results1.push(mapx = 0);
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    GamePlay.prototype.getTileSlice = function(tileNumber) {
      return [tileNumber * 16, 0, 16, 16];
    };

    GamePlay.prototype.pause = function(halt) {
      if (halt == null) {
        halt = false;
      }
      this.overworldResponse.disable();
      if (halt) {
        if (requestAnimationFrame !== null) {
          cancelRequestAnimFrame(this.handle);
        } else {
          clearTimeout(this.handle);
        }
      }
      return this.running = false;
    };

    GamePlay.prototype.requestFrame = function(cb) {
      if (requestAnimationFrame !== null) {
        return this.handle = requestAnimFrame(cb);
      } else {
        return this.handle = setTimeout(cb, 1000 / 64);
      }
    };

    return GamePlay;

  })();

}).call(this);
