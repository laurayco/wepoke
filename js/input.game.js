// Generated by CoffeeScript 1.6.3
(function() {
  var mergeDictArrayReduceFunc,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  mergeDictArrayReduceFunc = function(sum, part) {
    return sum[part[0]] = part[1];
  };

  this.Syndicator = (function() {
    function Syndicator() {
      this.emitOnSignal = __bind(this.emitOnSignal, this);
      this.emitOffSignal = __bind(this.emitOffSignal, this);
      this.pull = __bind(this.pull, this);
      this.peek = __bind(this.peek, this);
      this.codeOff = __bind(this.codeOff, this);
      this.codeOn = __bind(this.codeOn, this);
    }

    Syndicator.prototype.codes = {};

    Syndicator.prototype.connections = [];

    Syndicator.prototype.codeOn = function(code) {
      var v;
      v = 0 - Date.now();
      if (code in this.codes) {
        this.codes[code].push(v);
      } else {
        this.codes[code] = [v];
      }
      return this.emitOnSignal(code);
    };

    Syndicator.prototype.codeOff = function(code) {
      var l, v,
        _this = this;
      v = Date.now();
      if (code in this.codes) {
        l = this.codes[code];
        if (l.length > 0) {
          if (l[l.length - 1] < 0) {
            l[l.length - 1] += v;
            return this.emitOffSignal(code, l[l.length - 1], function(capture) {
              if (!capture) {
                return _this.codes[code].pop();
              }
            });
          }
        }
      }
    };

    Syndicator.prototype.peek = function() {
      var keyCode, r, values;
      r = (function() {
        var _i, _len, _ref, _results;
        _ref = this.codes;
        _results = [];
        for (values = _i = 0, _len = _ref.length; _i < _len; values = ++_i) {
          keyCode = _ref[values];
          if (values.length < 1) {
            continue;
          }
          _results.push([keyCode, values[0]]);
        }
        return _results;
      }).call(this);
      return r.reduce(mergeDictArray, {});
    };

    Syndicator.prototype.pull = function() {
      var keyCode, r, values;
      r = (function() {
        var _ref, _results;
        _ref = this.codes;
        _results = [];
        for (keyCode in _ref) {
          values = _ref[keyCode];
          if (values.length < 1) {
            continue;
          }
          _results.push([keyCode, values.shift()]);
        }
        return _results;
      }).call(this);
      return r.reduce(mergeDictArray, {});
    };

    Syndicator.prototype.emitOffSignal = function(code, duration, callback) {
      var con, r, _i, _len, _ref;
      _ref = (function() {
        var _j, _len, _ref, _results;
        _ref = this.connections;
        _results = [];
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          con = _ref[_j];
          _results.push(con.handleOff(code, duration));
        }
        return _results;
      }).call(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        if (r) {
          callback(true);
        }
      }
      return callback(false);
    };

    Syndicator.prototype.emitOnSignal = function(code) {
      var con, _i, _len, _ref, _results;
      _ref = this.connections;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        con = _ref[_i];
        _results.push(con.handleOn(code));
      }
      return _results;
    };

    return Syndicator;

  })();

  this.InputEventDelegater = (function() {
    function InputEventDelegater(syndicator) {
      this.syndicator = syndicator;
      this.handleOn = __bind(this.handleOn, this);
      this.handleOff = __bind(this.handleOff, this);
      this.disable = __bind(this.disable, this);
      this.enable = __bind(this.enable, this);
    }

    InputEventDelegater.prototype.enable = function() {
      if (!(__indexOf.call(this.syndicator.connections, this) >= 0)) {
        return this.syndicator.connections.push(this);
      }
    };

    InputEventDelegater.prototype.disable = function() {
      if (__indexOf.call(this.syndicator.connections, this) >= 0) {
        return this.syndicator.connections.remove(this);
      }
    };

    InputEventDelegater.prototype.shouldHandleSignal = function(code, duration) {
      if (duration == null) {
        duration = 0;
      }
      return true;
    };

    InputEventDelegater.prototype.handleOff = function(code, duration) {
      if (this.shouldHandleSignal(code, duration)) {
        return this.handleSignalOff(code, duration);
      }
    };

    InputEventDelegater.prototype.handleOn = function(code) {
      if (this.shouldHandleSignal(code)) {
        return this.handleSignalOn(code);
      }
    };

    InputEventDelegater.prototype.handleSignalOn = function(code) {
      return this;
    };

    InputEventDelegater.prototype.handleSignalOff = function(code, duration) {
      return this;
    };

    return InputEventDelegater;

  })();

  this.CodeGenerator = (function() {
    function CodeGenerator(syndicator) {
      this.syndicator = syndicator;
      this.sendSignal = __bind(this.sendSignal, this);
    }

    CodeGenerator.prototype.sendSignal = function(code, method) {
      if (method) {
        return this.syndicator.codeOn(code);
      } else {
        return this.syndicator.codeOff(code);
      }
    };

    return CodeGenerator;

  })();

  this.Keyboard = (function(_super) {
    __extends(Keyboard, _super);

    function Keyboard(syndicator, kbrdsrc) {
      if (kbrdsrc == null) {
        kbrdsrc = null;
      }
      this.handleKeyUp = __bind(this.handleKeyUp, this);
      this.handleKeyDown = __bind(this.handleKeyDown, this);
      Keyboard.__super__.constructor.call(this, syndicator);
      this.keyboardSource = kbrdsrc || window;
      this.keyboardSource.addEventListener('keydown', this.handleKeyDown);
      this.keyboardSource.addEventListener('keyup', this.handleKeyUp);
    }

    Keyboard.prototype.handleKeyDown = function(event) {
      return this.sendSignal(event.keyCode, true);
    };

    Keyboard.prototype.handleKeyUp = function(event) {
      return this.sendSignal(event.keyCode, false);
    };

    return Keyboard;

  })(CodeGenerator);

  this.DemoApp = (function() {
    var _ref;

    DemoApp.KeyAlerter = (function(_super) {
      __extends(KeyAlerter, _super);

      function KeyAlerter() {
        _ref = KeyAlerter.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      KeyAlerter.prototype.handleSignalOff = function(code, duration) {
        console.log("Key " + code + " was held for " + duration + " milliseconds.");
        return true;
      };

      return KeyAlerter;

    })(InputEventDelegater);

    function DemoApp() {
      this.syndicator = new Syndicator();
      this.keyboard = new Keyboard(this.syndicator);
      this.subscriber = new this.constructor.KeyAlerter(this.syndicator);
      this.subscriber.enable();
    }

    return DemoApp;

  })();

}).call(this);
